stages:
  - cleanup
  - deploy
  - nginx

cleanup_server:
  stage: cleanup
  tags:
    - shell
  script:
    # Удаляем содержимое /opt/ на сервере
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
    - ssh root@$SERVER_HOST << 'EOF'
        rm -rf /opt/*
      EOF
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push"'

deploy_application:
  stage: deploy
  tags:
    - shell
  script:
    # Копируем файлы на сервер и деплоим приложение
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
    - rsync -avz --exclude='*.log' --exclude='tmp/' -e "ssh -o StrictHostKeyChecking=no" ./ root@$SERVER_HOST:/opt/django_app/
    - ssh root@$SERVER_HOST << 'EOF'
        sudo mkdir -p /opt/django_app_static/
        sudo mkdir -p /opt/django_app_data/
        cd /opt/django_app/
        docker-compose down || exit 1
        docker-compose pull || exit 1
        docker-compose up -d --build || exit 1
      EOF

configure_nginx:
  stage: nginx
  tags:
    - shell
  script:
    # Настраиваем Nginx
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
    - ssh root@$SERVER_HOST << 'EOF'
        sudo apt install -y nginx || exit 1
        sudo rm /etc/nginx/sites-enabled/default || true
        sudo ln -sf /opt/django_app/conf/django_app.nginx /etc/nginx/sites-available/
        sudo ln -sf /etc/nginx/sites-available/django_app.nginx /etc/nginx/sites-enabled/
        cat /etc/nginx/sites-enabled/django_app.nginx || exit 1
        sudo nginx -t || exit 1
        sudo systemctl restart nginx || exit 1
      EOF
